#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;


#define MAX 8
double dist[MAX][MAX];
int n;

//path: 지금까지 만든 경로
//visited: 각 도시의 방문 여부
//currentLength: 지금까지 만든 경로 길이
//나머지 도시들을 모두 방문하는 경로들 중 가장 짧은 것의 길이를 반환 -> 재귀 끝날때마다 최대 최소 비교

double shortestPath(int n,vector<int> &path, vector<bool>& visited, double currentLength)//n을 지정해주는 이유가 전역변수 n을 쓰면 참조시간이 길어져 시간초과가 나는걸로 분석을 했는데 맞는지 모르겠다..
{
	//기저 사례: 모든 도시를 다 방문했을 때는 시작 도시로 돌아가고 종료한다.
	if (path.size() == n)
		return currentLength;
	double ret = numeric_limits<double>::max();

	//다음 방문할 도시를 전부 시도해 본다.
	for (int next = 0; next < n; ++next)
	{
		if (visited[next]) continue;
		//나머지 경로를 재귀 호출을 통해 완성하고 가장 짧은 경로의 길이를 얻는다
		int here = path.back();
		path.push_back(next);
		visited[next] = true;

		double cand = shortestPath(n,path, visited, currentLength + dist[here][next]);

		ret = min(ret, cand);
		visited[next] = false;
		path.pop_back();
	}

	return ret;
}
int main(int argc, char * argv[])
{
	int TestCase;
	cin >> TestCase;
	double result;

	if (TestCase > 50 || TestCase < 0) return 0;

	for (int i = 0; i < TestCase; i++)
	{
		cin >> n;
		if (n < 3 || n > 8) return 0;

		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				cin >> dist[i][j];
				if (dist[i][j]>1415 || dist[i][j] < 0)
					return 0;
			}
		}

		double answer = numeric_limits<double>::max(); //자료형 초가


		for (int k = 0; k < n; k++)
		{
			vector<bool> visited(n, false);
			vector<int> path(1,k);
			visited[k] = true;
			result = shortestPath(n,path, visited, 0.0000000000);
			if(answer > result) 
				answer = result;
		}

		printf("%.10f\n", answer);
	}
	return 0;
}
