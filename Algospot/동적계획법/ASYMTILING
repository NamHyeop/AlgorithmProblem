#include<iostream>
#include<cstring>
using namespace std;
const int MOD = 1000000007;

int cache[101];

//타일들의 갯수를 세는 함수
int tiling(int width)
{
	if (width <= 1)
		return 1;

	int &ret = cache[width];
	if (ret != -1)
		return ret;
//가로로 2개를 놔둘것인가 1개를 놔둘것인가의 모든 경우의 수
	return ret = (tiling(width - 2) + tiling(width - 1)) % MOD;
}

//모든 타일링수 - 대칭타일링수
int asymmetric(int width)
{
	if (width % 2 == 1)
		return (tiling(width) - tiling(width / 2) + MOD) % MOD;

	int ret = tiling(width);

	ret = (ret - tiling(width / 2) + MOD) % MOD; //음수결과 방지를 위한 MOD 먼저 더해주기
	ret = (ret - tiling(width / 2 - 1) + MOD) % MOD;
	return ret;
}
/*직접 비대칭 타일링수를 다 찾는 방법
int asymmetric(int width)
{
	if(width <= 2)
		return 0;
	int& ret = cache2[width];
	if(ret!= -1) return ret;
	ret = asymmetric(width -2) % MOD; //양끝에 세로벽돌(가로 사이즈 =1)을 2개 둘 경우 
	ret = (ret+asymmetric2(width-4)) % MOD;//양끝에 가로벽돌을(가로 사이즈 =2) 2개 둘 경우
	ret = (ret+asymmetric2(width-3)) % MOD;//남은 공간을 세로벽돌 1개,가로벽돌1개로 채우는 경우
	ret = (ret+asyymetric2(width-3)) % MOD;//남은 공간을 가로벽돌 1개,세로벽돌1개로 채우는 경우
	return ret;
}*/

int main(int argc, char*argv[])
{
	int Testcase;
	cin >> Testcase;
	if (Testcase > 50 || Testcase < 1)
		return 0;

	for (int i = 0; i < Testcase; i++)
	{
		int width;
		memset(cache, -1, sizeof(cache));
		cin >> width;
		if (width < 1 || width > 100)
			return 0;
		cout << asymmetric(width) << endl;
	}

	return 0;
}
