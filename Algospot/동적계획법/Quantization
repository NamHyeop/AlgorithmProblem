#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;

const int INF = 987654321;
//A[i]:양자화해야 할 수열, 정렬한 상태(밑에 preCalculate에서 정렬하고 들어갈거임)
//pSum[]:A[]의 부분합을 저장한다. pSum[i]는 A[0]...A[i]의 합
//psqSum[]: A[]제곱의 부분합을 저장한다. psqSum[i]는 A[0]^2..A[i]^2의 합
int n; //수열의 길이
int A[101];
int pSum[101];
int psqSum[101];
int cache[101][11];
//A를 정렬하고 각 부분합을 계산한다.
void precalculate(void)
{
	sort(A, A + n);// a<b조건이어야 최적화라는 가정을 하고 들어갔기 때문에 정렬을 시작해줌
	pSum[0] = A[0];//재귀함수 호출전 첫 번째꺼를 미리 정하고 들어가는 구조
	psqSum[0] = A[0] * A[0];

	for (int i = 1; i < n; i++)
	{
		pSum[i] = pSum[i - 1] + A[i]; //부분합 
		psqSum[i] = psqSum[i - 1] + A[i] * A[i]; //부분제곱의합
	}
}

//A[lo]..A[hi] 구간을 하나의 숫자로 표현할 때 최소 오차 합을 계산한다.
int minError(int low, int high)
{
	//부분합을 이용해 A[lo]~A[hi]까지의 합을 구한다.
	int sum = pSum[high] - (low == 0 ? 0 : pSum[low - 1]);
	int sqSum = psqSum[high] - (low == 0 ? 0 : psqSum[low - 1]);
	//평균을 반올림한 값으로 이 수들을 표현한다.
	int m = (int)(0.5 + (double)sum / (high - low + 1));
	//sum(A[i]-m)^2를 전개한 결과를 부분 합으로 표현한다.
	int ret = sqSum - (2 * sum*m) + (m * m*(high - low + 1));
	return ret;
}

int quantize(int from, int parts)
{
	//기저 사례: 모든 숫자를 다 양자화했을 때
	if (from == n)
		return 0;
	//기저 사례: t숫자는 아직 남앗는데 더 묶을 수 없을 때 아주 큰 값을 반환한다.
	if (parts == 0)
		return INF;
	int &ret = cache[from][parts];
	if (ret != -1) 
		return ret;
	ret = INF;
	//조각의 길이를 변화시켜 가며 최소치를 찾는다.
	for (int partSize = 1; partSize + from <= n; partSize++)
		ret = min(ret, minError(from, partSize + from - 1) + quantize(from + partSize, parts - 1));

	return ret;
}

int main(int argc, char* argv[])
{
	int Testcase;
	cin >> Testcase;

	for (int i = 0; i < Testcase; i++)
	{
		int divideNum;
		cin >> n;
		cin >> divideNum;
		if (n <1 || n>100 || divideNum <1 || divideNum >10)
			return 0;

		for (int i = 0; i < n; i++)
			cin >> A[i];
		
		memset(cache, -1, sizeof(cache));
		precalculate();
		cout << quantize(0, divideNum) << endl;
	}
	return 0;
}
