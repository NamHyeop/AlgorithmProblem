#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;

int arraySize;
int triangle[100][100];
int cache2[100][100];
int countCache[100][100];

int path2(int y, int x)
{
	//기저사례
	if (y == arraySize - 1)
		return triangle[y][x];
	//메모이제이션
	int &ret = cache2[y][x];

	if (ret != -1)
		return ret;

	return ret = max(path2(y + 1, x), path2(y + 1, x + 1)) + triangle[y][x];
}

int count(int y, int x)
{
	//기저사례: 맨 아래줄에 도달한 경우
	if (y == arraySize - 1)
		return 1;
	//메모이제이션
	int &ret = countCache[y][x];
	if (ret != -1)
		return ret;
	ret = 0;
	if (path2(y + 1, x + 1) >= path2(y + 1, x))
		ret += count(y + 1, x+1);
	if (path2(y + 1, x + 1) <= path2(y + 1, x))
		ret += count(y + 1, x);
	return ret;
}
int main(int argc, char*argv[])
{
	int Testcase;
	cin >> Testcase;
	for (int i = 0; i < Testcase; i++)
	{
		cin >> arraySize;
		memset(cache2, -1, sizeof(cache2));
		memset(countCache, -1, sizeof(countCache));
		for (int i = 0; i < arraySize; i++)
		for (int j = 0; j <= i; j++)
			cin >> triangle[i][j];;

		cout << count(0, 0) << endl;
	}
}
