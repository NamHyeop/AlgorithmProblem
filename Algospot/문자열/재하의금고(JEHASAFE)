#include<iostream>
#include<string>
#include<vector>

using namespace std;

//N에서 자기 자신을 찾으면서 나타나는 부분 일치를 이용해 pi[]를 계산
//pi[i] =N[..i]의 접미사도 되고 접두사도 되는 문자열의 최대 길이
vector<int> getPartialMatch(const string &N)
{
	int m = N.size();
	vector<int> pi(m, 0);
	
	//KMP로 자기 자신을 찾는다
	//N을 N에서 찾는다. begin = 0이면 자기 자신을 찾아버리니까 안됨!
	int begin = 1, matched = 0;
	//비교할 문자가 N의 끝에 도달할 때까지 찾으면서 부분 일치를 모두 기록
	while (begin + matched < m)
	{
		if (N[begin + matched] == N[matched])
		{
			++matched;
			pi[begin + matched - 1] = matched;
		}
		else
		{
			if (matched == 0)
				begin++;
			else
			{
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return pi;
}

vector<int> kmpSearch(const string &H, const string &N)
{
	int n = H.size(), m = N.size();
	vector<int> ret;
	vector<int>pi = getPartialMatch(N);
	//현재 대응된 글자의 수
	//begin = matched = 0에서 부터 시작
	int matched = 0;

	for (int i = 0; i < n; i++)
	{
		//matched번 글자와 짚더미의 해당 글자가 불일치할 경우,
		//현재 대응된 글자의 수를 pi[matched-1]로 줄인다
		while (matched > 0 && H[i] != N[matched])
			matched = pi[matched - 1];
		//글자가 대응될경우
		if (H[i] == N[matched])
		{
			matched++;
			if (matched == m)
			{
				ret.push_back(i - m + 1);
				matched = pi[matched - 1];
			}
		}
	}
	return ret;
}

//환형 문자열을 1번 더 더해서 원형으로 표현해야 할 것을 그냥 문자열처럼 표현
int shift(const string &original, const string &target)
{
	return kmpSearch(original + original, target)[0];
}

int main(void)
{
	int Testcase;
	cin >> Testcase;

	for (int i = 0; i < Testcase; i++)
	{
		int Size;
		int result = 0;
		cin >> Size;

		vector<string> pattern;
		for (int i = 0; i <= Size; i++)
		{
			string tmp;
			cin >> tmp;
			pattern.push_back(tmp);
		}

		bool flag = true;
		
		for (int i = 0; i < Size; i++)
		{
			if (flag)
			{
				result += shift(pattern[i+1], pattern[i]); //처음에는 시계 방향이므로 앞에껄 이용해 찾아야함
				flag = false;
			}
			else
			{
				result += shift(pattern[i], pattern[i+1]);//그 다음 반시계 방향이므로 뒤에껄 이용해 찾아야함
				flag = true;
			}

		}
		cout << result << endl;
	}
}
