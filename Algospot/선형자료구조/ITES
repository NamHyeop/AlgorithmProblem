#include<iostream>
#include<stack>
#include<string>

using namespace std;

//stack을 사용하면서 for문의 증감 연산자의 이용과
//반복되는 구조에 집중적으로 봐야하는 코드인거 같다.
//처음에 스택 두 개를 사용해서 문제를 푸는 방법을 생각했는데 문자열 사용을
//하는것이 좀 더 간결한 코드가 나오는거 같다.

bool wellMatched(const string& formula)
{
	//여는 괄호 문자들과 닫는 괄호 문자들
	const string opening("({["), closing(")}]");
	//이미 열린 괄호들을 순서대로 담는 스택
	stack<char> openStack;
	for (int i = 0; i < formula.size(); i++)
		//여는 괄호인지 닫는 괄호인지 집어넣는다.
	if (opening.find(formula[i]) != -1)
		//여는 괄호라면 무조건 스택에 집어넣는다.
		openStack.push(formula[i]);
	else
	{
		//이 외의 경우 스택 맨 위의 문자와 맞춰보자.
		//스택이 비어 있는 경우에는 실패
		if(openStack.empty())
			return false;
		//서로 짝이 맞지 않아도 실패
		if (opening.find(openStack.top()) != closing.find(formula[i]))
			return false;
		
		openStack.pop();
	}

	//(){}{ 이런 사례를 위해 존재하는 조건, 다 처리하고 닫히지 않은 괄호가 없어야 한다.
	return openStack.empty();
}

int main(int argc, char * argv[])
{
	int Testcase;
	cin >> Testcase;

	for (int i = 0; i < Testcase; i++)
	{
		string formula;
		cin >> formula;

		int signal = wellMatched(formula);
		
		if (signal)
			cout << "YES" << endl;
		else
			cout << "NO" << endl;
	}

	return 0;
}
