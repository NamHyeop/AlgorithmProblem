#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

long long divide(vector<long long> &v, long long left, long long right)
{
	if (left == right)
		return v[left] * v[left];

	long long mid = (left + right) / 2;
	long long result = max(divide(v, left, mid), divide(v, mid + 1, right));
	
	long long sum = v[mid] + v[mid + 1];
	long long minValue = min(v[mid], v[mid + 1]);

	result = max(result, sum*minValue);

	int low = mid;
	int high = mid + 1;
	while (left < low || high < right)
	{
		if (high < right && (low == left || v[low - 1] < v[high + 1]))
		{
			//cout << low << " " << high << endl;
			high++;
			sum += v[high];
			minValue = min(minValue, v[high]);
		}
		else
		{
		     //cout << low << " " << high << endl;
			low--;
			sum += v[low];
			minValue = min(minValue, v[low]);
		}

		result = max(result, sum*minValue);
	}
	return result;
}

int main(int argc, char *argv[])
{
	int maxNum;
	cin >> maxNum;

	vector<long long>v(maxNum, 0);
	
	for (int i = 0; i < maxNum; i++)
	{
		cin >> v[i];
	}

	cout << divide(v, 0, v.size()-1) << endl;

}
