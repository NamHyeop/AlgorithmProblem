#include<iostream>
#include<vector>
#include<climits>
#include<algorithm>
#define MAX 500
using namespace std;

int N;
int M;
int ret = INT_MIN;
int board[MAX][MAX];
int BLOCKS[19][4][2]=
{
	{ { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 } },
  /*ㅁㅁㅁㅁ*/
	{ { 0, 0 }, { 1, 0 }, { 2, 0 }, { 3, 0 } },
  /*
  ㅁ
  ㅁ
  ㅁ
  ㅁ
  */
	{ { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 } },
  /*
  ㅁㅁ
  ㅁㅁ
  */
	{ { 0, 0 }, { 0, 1 }, { 1, 1 }, { 0, 2 } },
	/*
  ㅁㅁㅁ
   ㅁ 
  */
  { { 0, 1 }, { 1, 0 }, { 1, 1 }, { 2, 1 } },
  /*
    ㅁ
  ㅁㅁ
    ㅁ
  */	
  { { 0, 1 }, { 1, 0 }, { 1, 1 }, { 1, 2 } },
	/*
    ㅁ
  ㅁㅁㅁ 
  */
  { { 0, 0 }, { 1, 0 }, { 2, 0 }, { 1, 1 } },
  /*
  ㅁ
  ㅁㅁ
  ㅁ
  */
	{ { 0, 0 }, { 1, 0 }, { 2, 0 }, { 2, 1 } },
	/*
  ㅁ
  ㅁ
  ㅁㅁ
  */
  { { 0, 0 }, { 0, 1 }, { 0, 2 }, { 1, 0 } },
	/*
  ㅁㅁㅁ
  ㅁ
  */
  { { 0, 0 }, { 0, 1 }, { 1, 1 }, { 2, 1 } },
	/*
  ㅁㅁ
    ㅁ
    ㅁ
  */
  { { 0, 2 }, { 1, 0 }, { 1, 1 }, { 1, 2 } },
  /*
      ㅁ
  ㅁㅁㅁ   
  */
	{ { 0, 0 }, { 1, 0 }, { 1, 1 }, { 2, 1 } },
	/*
  ㅁ
  ㅁㅁ
    ㅁ
  */
  { { 1, 0 }, { 1, 1 }, { 0, 1 }, { 0, 2 } },
  /*
    ㅁㅁ
  ㅁㅁ
  */
	{ { 2, 0 }, { 2, 1 }, { 1, 1 }, { 0, 1 } },
	/*
    ㅁ
    ㅁ
  ㅁㅁ 
  */
  { { 0, 0 }, { 1, 0 }, { 1, 1 }, { 1, 2 } },
  /*
  ㅁ
  ㅁㅁㅁ
  */	
  { { 0, 0 }, { 0, 1 }, { 1, 0 }, { 2, 0 } },
	/*
  ㅁㅁ
  ㅁ
  ㅁ
  */
  { { 0, 0 }, { 0, 1 }, { 0, 2 }, { 1, 2 } },
  /*
  ㅁㅁㅁ
      ㅁ
  */
	{ { 0, 1 }, { 1, 0 }, { 1, 1 }, { 2, 0 } },
  /*
    ㅁ
  ㅁㅁ
  ㅁ
  */
  { { 0, 0 }, { 0, 1 }, { 1, 1 }, { 1, 2 } }
  /*
  ㅁㅁ
    ㅁㅁ
  */ 
};

int main(int argc, char*argv[])
{
	cin >> N >> M;

	for (int i = 0; i < N; i++)
	for (int j = 0; j < M; j++)
		cin >> board[i][j];

	//cout << ret << "\n";
	for (int i = 0; i < 19; i++)
	{
		for (int y = 0; y < N; y++)
		{
			for (int x = 0; x < M; x++)
			{
				int sum = 0;
				for (int l = 0; l < 4; l++)
				{
					int nextY = y + BLOCKS[i][l][0];
					int nextX = x + BLOCKS[i][l][1];
					if (nextY >= 0 && nextX >= 0 && nextY < N && nextX < M)
						sum += board[nextY][nextX];
					else
					{
						sum = 0;
						break;
					}
				}
				ret = max(ret, sum);
			}
		}
	}

	cout << ret << "\n";

	return 0;
}
