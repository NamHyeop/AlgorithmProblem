#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int flag = 0; //검사를 통과했을 경우 flag를 밑에서 1로 설정하여 더 이상 출력 안하기 위해 존재(check문에 들어가면 더 깔끔할텐데 걍 정답처리 되어서 ;;)

int check(vector<int> &tmp) //7개의 난쟁이 값을 넣었을때 100이 되는지 확인하는 함수
{
	int plate = 0;
	for (int i = 0; i < tmp.size(); i++)
	{
		plate += tmp[i];
	}

	if (plate == 100)
		return true;
	else
		return false;
}

int search(vector<int> &PeopleKey, vector<bool>&EntrancePlate, vector<int> &tmp) /탐색 함수
{
	if (tmp.size() == 7 && flag ==0) //size가 7이면 검사해서 100인지 확인
	{
		if (check(tmp))
		{
			sort(tmp.begin(), tmp.end(), less<int>());
			
			for (int i = 0; i < tmp.size(); i++)
			{
				cout << tmp[i] << endl;
			}

			flag = 1;
			return 0;
		}
	}

	for (int i = 0; i < 9; i++)
	{
		if (EntrancePlate[i])	continue;
		
		if (tmp.size() > 7)
			tmp.pop_back();

		tmp.push_back(PeopleKey[i]);
		EntrancePlate[i] = true;

		search(PeopleKey, EntrancePlate, tmp);
		
		EntrancePlate[i] = false;
		tmp.pop_back();
	}
	return 0;
}
int main(int argc, char*argv[])
{
	vector<int> PeopleKey(9, 0); //사람들의 키를 입력받는 백터

	for (int i = 0; i < 9; i++) //값 대입
	{
		cin >> PeopleKey[i];
		if (PeopleKey[i] >= 100) 
			return 0;
	}

	for (int i = 0; i < 9; i++)
	{
		vector<int>tmp;
		vector<bool> EntrancePlate(9, false); //입력판이 필요한 이유는 경우의 수를 만들 때 한 번 true로 설정되었을 경우 중복해서 체크 안해주기 위함임 이해가 안 되면 위에 continue문과 연관지어볼것
		tmp.push_back(PeopleKey[i]);
		EntrancePlate[i] = true;
		search(PeopleKey,EntrancePlate,tmp);
		
	}

	return 0;
}
