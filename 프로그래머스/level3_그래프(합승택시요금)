#include<bits/stdc++.h>
#define pill pair<int,int>
#define mp(X,Y) make_pair(X,Y)
#define ll long long

using namespace std;

void make_dist(int n, vector<vector<int>> &fares, vector<vector<int>> &dists)
{
	for (int i = 0; i < fares.size(); i++)
	{
		int start = fares[i][0];
		int end = fares[i][1];
		int d = fares[i][2];

		dists[start][end] = d;
		dists[end][start] = d;
	}
	for (int i = 1; i <= n; i++)
		dists[i][i] = 0;
}

int solution(int n, int s, int a, int b, vector<vector<int>> fares)
{
	int answer;
	vector<vector<int>> dist(n + 1, vector<int>(n + 1, INT_MAX));
	make_dist(n, fares, dist);

	answer = dist[s][a] + dist[s][b]; // 중간점을 안 걸치고 가는 경우
	for (int k = 1; k <= n; k++)//중간점
	for (int i = 1; i <= n; i++)//시작점
	for (int j = 1; j <= n; j++)//도착점
	{
		if (i == j || i == k || k == j)
			continue;

		if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX)
			dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
	}
	
	for (int i = 1; i <= n; i++)
	{
		if (dist[s][i] != INT_MAX && dist[i][a] != INT_MAX && dist[i][b] != INT_MAX)
			answer = min(answer, dist[s][i] + dist[i][a] + dist[i][b]);
	}
	return answer;
}

int main(void)
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int n = 6;
	int s = 4;
	int a = 6;
	int b = 2;

	vector<vector<int>> v = { { 4, 1, 10 }, { 3, 5, 24 }, { 5, 6, 2 }, { 3, 1, 41 }, { 5, 1, 24 }, { 4, 6, 50 }, { 2, 4, 66 }, { 2, 3, 22 }, { 1, 6, 25 } };
	cout << solution(n, s, a, b, v);
}
